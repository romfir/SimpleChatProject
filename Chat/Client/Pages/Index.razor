@page "/{chatRoomName?}"
@using Microsoft.AspNetCore.SignalR.Client
@using Chat.Shared
@using System.Linq;
@using System.Threading
@using Chat.Client.Shared.Models
@using System.Text.RegularExpressions
@using Blazored.LocalStorage

@inject ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@* todo go to top/bottom jak sie wgl da samym c#? *@
@* todo trzymanie username w localstorage? *@
<nav class="navbar navbar-expand-lg navbar-light fix fixed-top " style="position: sticky">
    <div style="margin:0 auto;" class="roundBorder gradientDark">
        <h2 class="ml-md-auto" style="color:white; padding-left:1em; padding-right:1em">Chat room: @ChatRoomNameParsed</h2>
    </div>
</nav>
<div class="Site">
    <div class="Site-content" id="scroller">
        @if (_messages.Any())
        {
            @foreach (Message message in SortedMessages) //todo edycja
            {
                <div class="@(message.User == _currentMessage.User ? "container darker" : "container")">

                    @if (message.User != _currentMessage.User)
                    {
                        <div class="user-name-right">@message.User</div>
                    }
                    <p>@message.Text</p>

                    <span class="time-right">@message.TimeStamp</span>

                    @if (message.User == _currentMessage.User)
                    {
                        <span class="oi oi-x remove-span" @onclick="_ => DeleteMessage(message.Id)" aria-hidden="true"></span>
                    }

                </div>
            }

        }
        else
        {
            <div id="container">
                <p style="font-size:100px;">&#x1F622;</p>
                <p>Currently there are no messages</p>
            </div>
        }
        @if (_typingUserNames.Any())
        {
            <p class="writing">@(TypingMessage)<span>.</span><span>.</span><span>.</span></p>
        }
        <div id="anchor"></div>
    </div>
    <footer class="bottom-footer gradientDark roundBorder" style="display: inline-block">
        <EditForm Model="@_currentMessage" OnValidSubmit="@Send">
            <DataAnnotationsValidator />

            <div class="form-group small-margin " style="display: inline-block">
                <label style="color:white" class="roundBorder">
                    User:
                    <InputText id="username" @bind-Value="_currentMessage.User" class="roundBorder" tabindex="1" autofocus />

                </label>
                <ValidationMessage For="@(() => _currentMessage.User)" />
            </div>

            <div style="display: inline-block">
                <button @onclick="ChangeConnectionStateAsync" type="button" class="roundBorder small-margin" style="display: inline-block" disabled="@(IsConnecting)" tabindex="4">
                    @if (IsConnecting)
                    {
                        <div>Connecting</div>
                    }
                    else if (IsConnected)
                    {
                        <div>Disconnect</div>
                    }
                    else
                    {
                        <div>Reconnect</div>
                    }
                </button>
            </div>

            <br />

            <div class="form-group small-margin " style="display: inline-block">
                <label style="color:white">
                    Text:
                    <InputText id="message" @onkeypress="SendWritingNotification" @bind-Value="_currentMessage.Text" class="roundBorder" tabindex="2" autocomplete="off" />
                </label>
                <ValidationMessage For="@(() => _currentMessage.Text)" />
            </div>

            <div class="form-group small-margin " style="display: inline-block">
            </div>


            <div style="display: inline-block">
                <button class="btn-primary roundBorder small-margin" disabled="@(!IsConnected)" type="submit" style="display: inline-block; width:80px;" tabindex="5">
                    <span class="oi oi-arrow-circle-right" aria-hidden="true"></span>
                </button>
            </div>

        </EditForm>

        <EditForm Model="@_newRoomModel" OnValidSubmit="@ChangeChatRoom">
            <DataAnnotationsValidator />
            <label style="color:white">
                New Chat Room Name:
                <InputText id="ChatRoom" @onkeypress="StateHasChanged" @bind-Value="_newRoomModel.NewChatRoomName" class="roundBorder" tabindex="3" autocomplete="off" />
                <ValidationMessage For="@(() => _newRoomModel.NewChatRoomName)" />

            </label>

            <button class="roundBorder small-margin" disabled="@(!IsConnected)" type="submit" style="display: inline-block" tabindex="6">
                Change
            </button>
            <select class="form-control selectpicker" @bind="_newRoomModel.NewChatRoomName" style="display: inline-block; width:200px;">
                @foreach (string room in _rooms)
                {
                    if (ChatRoomName == room)
                    {
                        <option value="@room" selected="selected">@room</option>
                    }
                    else
                    {
                        <option value="@room">@room</option>
                    }

                }
            </select>
        </EditForm>
    </footer>
</div>

@code {
    [Parameter]
    public string ChatRoomName { get; set; } = null!;

    private HubConnection _hubConnection = default!;

    // ConcurrentDictionary?
    private Dictionary<Guid, Message> _messages = new();

    private HashSet<string> _rooms = new();

    private IOrderedEnumerable<Message> SortedMessages =>
        _messages.Select(x => x.Value).OrderBy(m => m.TimeStamp);

    private Message _currentMessage = new();

    private const string _userNameLocalStorageKey = "User";

    private CancellationTokenSource _cancellationTokenSource = new();

    private string TypingMessage
        => $"{string.Join(", ", _typingUserNames)} {(_typingUserNames.Count() == 1 ? " is " : " are ")} typing";

    private HashSet<string> _typingUserNames = new();

    private UserNewRoomModel _newRoomModel = new();

    private bool IsConnected
        => _hubConnection.State == HubConnectionState.Connected;

    private bool IsConnecting
        => _hubConnection is null || _hubConnection.State == HubConnectionState.Connecting;

    public string ChatRoomNameParsed
        => Regex.IsMatch(ChatRoomName, @"\s") ? "\"" + ChatRoomName + "\"" : ChatRoomName;

    protected override async Task OnInitializedAsync()
    {
        ChatRoomName = ChatRoomName ?? "Global";

        _hubConnection = new HubConnectionBuilder()
                                        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
                                        .Build();

        string userNameFromLocalStorage = await localStorage.GetItemAsync<string>(_userNameLocalStorageKey);

        if (userNameFromLocalStorage is object)
        {
            _currentMessage.User = userNameFromLocalStorage;
        }
        abc
        _hubConnection.On<Message>("ReceiveMessage", (message) =>
    {
        _messages.Add(message.Id, message);
        StateHasChanged();
    });

        _hubConnection.On<Guid>("DeleteMessage", (messageId) =>
        {
            if (_messages.Remove(messageId))
            {
                StateHasChanged();
            }
        });

        _hubConnection.On<string>("UserIsWriting", (userName) =>
        {
            if (userName != _currentMessage.User)
            {
                ReceiveWritingNotification(userName);
            }
        });

        _hubConnection.On<List<string>>("ChannelsList", (rooms) =>
        {
            _rooms = rooms.ToHashSet();
            StateHasChanged();
        });

        await StartAndRequestMessagesAsync();
    }

    private async Task StartAndRequestMessagesAsync()
    {
        await _hubConnection.StartAsync(_cancellationTokenSource.Token).ConfigureAwait(false);

        await _hubConnection.SendAsync("AddToGroup", ChatRoomName, _cancellationTokenSource.Token).ConfigureAwait(false);

        StateHasChanged();

        await RequestMessagesAsync().ConfigureAwait(false);
    }

    private async Task RequestMessagesAsync()
    {
        var stream = _hubConnection.StreamAsync<Message>("RequestMessages", ChatRoomName, _cancellationTokenSource.Token);

        _messages = new();

        StateHasChanged();

        await foreach (Message message in stream)
        {
            _messages.Add(message.Id, message);
            StateHasChanged();
        }
    }

    private async void Send()
    {
        _currentMessage.TimeStamp = DateTime.Now;
        _currentMessage.Id = Guid.NewGuid();
        await _hubConnection.SendAsync("SendMessage", _currentMessage, ChatRoomName, _cancellationTokenSource.Token);

        _currentMessage.Text = "";

        string userNameInLocalStorage = await localStorage.GetItemAsync<string>(_userNameLocalStorageKey);

        if (_currentMessage.User != userNameInLocalStorage)
        {
            await localStorage.SetItemAsync(_userNameLocalStorageKey, _currentMessage.User);
        }
    }

    private Task DeleteMessage(Guid messageId)
    {
        if (IsConnected)
        {
            return _hubConnection.SendAsync("DeleteMessage", messageId, ChatRoomName, _cancellationTokenSource.Token);
        }

        return Task.CompletedTask;
    }

    private Task ChangeConnectionStateAsync()
    {
        if (IsConnected)
        {
            _cancellationTokenSource.Cancel();
            return _hubConnection.StopAsync();
        }
        else
        {
            _cancellationTokenSource = new();
            return StartAndRequestMessagesAsync();
        }
    }

    private Task SendWritingNotification()
    {
        if (IsConnected && !string.IsNullOrEmpty(_currentMessage.User))
        {
            return _hubConnection.SendAsync("UserWriting", _currentMessage.User, ChatRoomName);
        }

        return Task.CompletedTask;
    }

    private async Task ReceiveWritingNotification(string userName)
    {
        if (_typingUserNames.Add(userName))
        {
            StateHasChanged();

            await Task.Delay(1000, _cancellationTokenSource.Token);

            _typingUserNames.Remove(userName);
            StateHasChanged();
        }
    }

    private async Task ChangeChatRoom()
    {
        _newRoomModel.NewChatRoomName = _newRoomModel.NewChatRoomName.Trim();

        if (ChatRoomName == _newRoomModel.NewChatRoomName)
        {
            return;
        }

        _rooms.Add(_newRoomModel.NewChatRoomName);

        NavigationManager.NavigateTo($"/{_newRoomModel.NewChatRoomName}");

        if (!IsConnected)
        {
            await _hubConnection.StartAsync(_cancellationTokenSource.Token).ConfigureAwait(false);
        }
        else
        {
            _cancellationTokenSource.Cancel();
            _cancellationTokenSource = new();
        }

        await _hubConnection.SendAsync("RemoveFromGroup", ChatRoomName, _cancellationTokenSource.Token).ConfigureAwait(false);

        ChatRoomName = _newRoomModel.NewChatRoomName;
        StateHasChanged();

        await _hubConnection.SendAsync("AddToGroup", ChatRoomName, _cancellationTokenSource.Token).ConfigureAwait(false);

        await RequestMessagesAsync().ConfigureAwait(false);

        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        _cancellationTokenSource.Cancel();

        await _hubConnection.DisposeAsync();
    }
}
