@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Chat.Shared
@using System.Linq;
@using System.Threading
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h2>Chat Messages</h2>
<div class="Site">
    <div class="Site-content" id="scroller">
        @if (_messages.Any())
        {
            @foreach (Message message in _messages) //todo edycja
            {
                <div class="@(message.User == _currentMessage.User ? "container darker" : "container")">

                    @if (message.User != _currentMessage.User)
                    {
                        <div class="user-name-right">@message.User</div>
                    }
                    <p>@message.Text</p>

                    <span class="time-right">@message.TimeStamp</span>

                    @if (message.User == _currentMessage.User)
                    {
                        <span class="oi oi-x remove-span" @onclick="_ => Remove(message.Id)" aria-hidden="true"></span>
                    }

                </div>
            }
            <div id="anchor"></div>
        }
        else
        {
            <div id="container">
                <p style="font-size:100px;">&#x1F622;</p>
                <p>Currently there are no messages</p>
            </div>
        }
    </div>
    <footer class="bottom-footer gradientDark roundBorder" style="display: inline-block">
        <EditForm Model="@_currentMessage" OnValidSubmit="@Send">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group small-margin " style="display: inline-block">
                <label style="color:white" class="roundBorder">
                    User:
                    <InputText id="userUser" @bind-Value="_currentMessage.User" class="roundBorder" tabindex="1" autofocus />
                </label>
            </div>


            <button class="btn-primary roundBorder small-margin" disabled="@(!IsConnected)" type="submit" style="display: inline-block;" tabindex="3">
                <span class="oi oi-arrow-circle-right" aria-hidden="true"></span>
            </button>


            <br />

            <div class="form-group small-margin " style="display: inline-block">
                <label style="color:white">
                    Text:
                    <InputText id="message" @onkeypress="SendWritingNotification" @bind-Value="_currentMessage.Text" class="roundBorder" tabindex="2" />
                </label>
            </div>

            <button @onclick="ChangeConnectionState" class="roundBorder small-margin" style="display: inline-block" disabled="@(IsConnecting)" tabindex="4">
                @if (IsConnecting)
                {
                    <div>Connecting</div>
                }
                else if (IsConnected)
                {
                    <div>Disconnect</div>
                }
                else
                {
                    <div>Reconnect</div>
                }
            </button>

        </EditForm>
    </footer>
</div>

@*zrobic z tego komponent?*@
@if (_typingUserNames.Any())
{
    <p class="writing">@(TypingMessage)<span>.</span><span>.</span><span>.</span></p>
}

@code {
    private HubConnection _hubConnection = default!;
    private List<Message> _messages = new();

    private Message _currentMessage = new();

    private CancellationTokenSource _cancellationTokenSource = new();

    private string TypingMessage
        => $"{string.Join(", ", _typingUserNames)} {(_typingUserNames.Count() == 1 ? " is " : " are ")} typing";

    private List<string> _typingUserNames = new();

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
                                                    .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
                                                    .Build();

        _hubConnection.On<Message>
            ("ReceiveMessage", (message) =>
            {
                _messages.Add(message);
                StateHasChanged();
            });

        _hubConnection.On<Guid>
            ("DeleteMessage", (messageId) =>
            {
                if (_messages.Exists(x => x.Id == messageId))
                {
                    _messages = _messages.Where(x => x.Id != messageId).ToList();
                //todo mozna pokolorowac na czerowono i zrobic jakis fade out
                StateHasChanged();
                }
            });

        _hubConnection.On<string>
            ("UserIsWriting", (userName) =>
            {
                if (userName != _currentMessage.User)
                {
                    ReceiveWritingNotification(userName);
                }
            });

        await StartAndRequestMessagesAsync();
    }

    private async Task StartAndRequestMessagesAsync()
    {
        await _hubConnection.StartAsync(_cancellationTokenSource.Token);
        StateHasChanged();

        var stream = _hubConnection.StreamAsync<Message>("RequestMessagesNew", _cancellationTokenSource.Token);

        _messages = new();
        await foreach (Message message in stream)
        {
            _messages.Add(message);
            StateHasChanged();
        }
    }

    async void Send()
    {
        _currentMessage.TimeStamp = DateTime.Now;
        _currentMessage.Id = Guid.NewGuid();
        await _hubConnection.SendAsync("SendMessage", _currentMessage, _cancellationTokenSource.Token);

        _currentMessage.Text = "";
    }

    private async void Remove(Guid messageId)
    {
        await _hubConnection.SendAsync("DeleteMessage", messageId, _cancellationTokenSource.Token);

        _messages = _messages.Where(x => x.Id != messageId).ToList();
        StateHasChanged();
    }


    public bool IsConnected
            => _hubConnection.State == HubConnectionState.Connected;

    public bool IsConnecting
            => _hubConnection.State == HubConnectionState.Connecting || _hubConnection is null;


    public Task ChangeConnectionState()
    {
        if (IsConnected)
        {
            _cancellationTokenSource.Cancel();
            return _hubConnection.StopAsync();
        }
        else
        {
            return StartAndRequestMessagesAsync();
        }
    }

    public void SendWritingNotification()
    {
        if (IsConnected && string.IsNullOrEmpty(_currentMessage.User))
        {
            _hubConnection.SendAsync("UserWriting", _currentMessage.User);
        }
    }

    public async void ReceiveWritingNotification(string userName)
    {
        if (!_typingUserNames.Contains(userName))
        {
            _typingUserNames.Add(userName);
            StateHasChanged();


            await Task.Delay(1000, _cancellationTokenSource.Token);

            _typingUserNames.Remove(userName);
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        _cancellationTokenSource.Cancel();

        await _hubConnection.DisposeAsync();
    }
}
